#!/usr/bin/php
<?php

require __DIR__ . '/../vendor/.composer/autoload.php';

use Symfony\Component\Yaml\Yaml;
use Composer\Json\JsonFile;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\Input;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\Output;
use Symfony\Component\Console\Helper\DialogHelper;

$input = new ArgvInput();
$app = new Application('Composer YAML to JSON and vice versa converter', '1.0');
$app->getDefinition()->addOption(new InputOption(
	'--force',
	'-f',
	InputOption::VALUE_OPTIONAL,
	'Do not ask if destination file already exists'
));

$force = $input->hasParameterOption(array('--force', '-f'));

$commands = array(
    array(
        'from' => 'json',
        'to' => 'yaml',
        'fromExt' => 'json',
        'toExt' => 'yml',
        'callback' => function ($fromFile, $toFile) {
            $json = file_get_contents($fromFile);
            $data = JsonFile::parseJson($json);

            $yaml = Yaml::dump($data);
            file_put_contents($toFile, $yaml);
        }
    ),
    array(
        'from' => 'yaml',
        'to' => 'json',
        'fromExt' => 'yml',
        'toExt' => 'json',
        'callback' => function ($fromFile, $toFile) {
            $data = Yaml::parse($fromFile);

            $json = JsonFile::encode($data)."\n";
            file_put_contents($toFile, $json);
        }
    )
);

foreach ($commands as $commandDesc) {
    $command = new Command(sprintf('to-%s', $commandDesc['to']));
    $command->setDescription(sprintf(
        'Converts %s file to %s',
        strtoupper($commandDesc['from']),
        strtoupper($commandDesc['to'])
    ));
    $command->addArgument(
        'from',
        InputArgument::OPTIONAL,
        sprintf('%s file to read from', strtoupper($commandDesc['from']))
    );
    $command->addArgument(
        'to',
        InputArgument::OPTIONAL,
        sprintf('%s file to write to', strtoupper($commandDesc['to']))
    );

    $command->setCode(function (Input $input, Output $output) use ($app, $commandDesc, $force) {
        $fromFile = $input->getArgument('from') ?: getcwd() . '/composer.' . $commandDesc['fromExt'];
        $toFile = $input->getArgument('to') ?: getcwd() . '/composer.' . $commandDesc['toExt'];

        if (!file_exists($fromFile)) {
            throw new \OutOfBoundsException(sprintf(
                'File to read from at %s not found',
                escapeshellarg($fromFile)
            ));
        }

        $continue = true;

        if (!$force && file_exists($toFile)) {
            $dialog = $app->getHelperSet()->get('dialog');
            /** @var $dialog \Symfony\Component\Console\Helper\DialogHelper */
            $continue = $dialog->askConfirmation($output, sprintf(
                'File to write to at %s already exists. Continue with overwriting it? ',
                escapeshellarg($toFile)
            ));
        }

        if ($continue) {
            $output->writeln(sprintf(
                'Executing conversion from %s to %s',
                escapeshellarg($fromFile),
                escapeshellarg($toFile)
            ));
            $commandDesc['callback']($fromFile, $toFile);
        }
    });
    $app->addCommands(array($command));
}

$app->run($input);
